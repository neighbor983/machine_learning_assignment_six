import math

'''
|          | M1   | M2  | M3  |  M4 |  M5 |  M6 |  M7 |  M8 |  M9 | M10 | M11 | M12 |
| -------- | ---- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |
| U1       | 1    | 5   | 2   |     | 4   | 4   | 2   | 2   |     | 3   | 2   |     |
| U2       | 5    | 3   |     | 2   | 4   | 2   | 1   |     |     | 4   | 3   | 2   |
| U3       |      |     |     | 5   | 2   |     | 4   |     |     | 1   |     | 1   |
| U4       |      | 3   |     |     |     | 1   | 2   | 3   | 4   |     |     | 4   |
| U5       | 4    | 3   | 4   | 1   | 4   | 1   |     | 4   |     | 1   | 5   | 1   |
| U6       | 2    | 4   | 4   | 4   |     |     | 3   | 1   | 4   |	4   | 5   |	1   |
| U7       |      |     | 3   | 1   | 1   |	4   |     | 5   | 2   | 1   |     |     |
| U8       | 4    |     |     |     | 3   |	2   | 2   |     | 3   |     |     | 2   |
| U9       | 5    | 1   |     | 4   | 2   | 4   | 4   | 4   |     | 1   | 2   | 3   |
| U10      | 4    | 2   |     | 5   | 3	  |     | 4   | 3   | 4   |     |     |     |
| Action   | 0.8  | 0.3 | 0.2 |	0.2 | 0.6 | 0.1 | 0.1 | 0.2 | 0.7 | 0.6 | 0.2 |	0.2 |
| Comedy   | 0.1  | 0.4 | 0.4 |	0.2 | 0.1 | 0.2 | 0.3 | 0.3 | 0.1 | 0   | 0.3 |	0.2 |
| Romance  | 0.05 | 0.1 | 0.4 |	0.3 | 0.2 | 0.3 | 0.5 | 0.3 | 0	  | 0.3 | 0.3 | 0.2 |
| Violence | 0.05 | 0.2 | 0   |	0.3 | 0.1 | 0.4 | 0.1 | 0.2 | 0.1 | 0.1 | 0.2 | 0.4 |

S(u, i) = ravg(u) + Σv ε U [(r(v, i) – ravg(v)) * w(u, v)] / Σv ε U w(u, v).	

w(u, v) = Σi ε I [(r(u, i) -  ravg(u))*(r(v, i) – ravg(v))] / [σ(u)σ(v)].
'''

U2avg  = ( 5.0 + 3 + 2 + 4 + 2 + 1 + 4 + 3 + 2 ) / 9.0;
U4avg  = ( 3.0 + 1 + 2 + 3 + 4 + 4 ) / 6.0;
U6avg  = ( 2.0 + 4 + 4 + 4 + 3 + 1 + 4 + 4 + 5 + 1 ) / 10.0;
U7avg  = ( 3.0 + 1 + 1 + 4 + 5 + 2 + 1 ) / 7.0;
U8avg  = ( 4.0 + 3 + 2 + 2 + 3 + 2 ) / 6.0;
U10avg = ( 4.0 + 2 + 5 + 3 + 4 + 3 + 4 ) / 7.0;

U2SD  = math.sqrt( ( 1.0 / 9.0 ) * ( ( 5.0 - U2avg ) ** 2 + ( 3.0 - U2avg ) ** 2 + ( 2.0 - U2avg ) ** 2 + ( 4.0 - U2avg ) ** 2 + ( 2.0 - U2avg ) ** 2 + ( 1.0 - U2avg ) ** 2 + ( 4.0 - U2avg ) ** 2 + ( 3.0 - U2avg ) ** 2 + ( 2.0 - U2avg ) ** 2 ) );
U4SD  = math.sqrt( ( 1.0 / 6.0 ) * ( ( 3.0 - U4avg ) ** 2 + ( 1.0 - U4avg ) ** 2 + ( 2.0 - U4avg ) ** 2 + ( 3.0 - U4avg ) ** 2 + ( 4.0 - U4avg ) ** 2 + ( 4.0 - U4avg ) ** 2 ) );
U6SD  = math.sqrt( ( 1.0 / 10.0) * ( ( 2.0 - U6avg ) ** 2 + ( 4.0 - U6avg ) ** 2 + ( 4.0 - U6avg ) ** 2 + ( 4.0 - U6avg ) ** 2 + ( 3.0 - U6avg ) ** 2 + ( 1.0 - U6avg ) ** 2 + ( 4.0 - U6avg ) ** 2 + ( 4.0 - U6avg ) ** 2 + ( 5.0 - U6avg ) ** 2 + ( 1.0 - U6avg ) ** 2 ) );
U7SD  = math.sqrt( ( 1.0 / 7.0 ) * ( ( 3.0 - U7avg ) ** 2 + ( 1.0 - U7avg ) ** 2 + ( 1.0 - U7avg ) ** 2 + ( 4.0 - U7avg ) ** 2 + ( 5.0 - U7avg ) ** 2 + ( 2.0 - U7avg ) ** 2 + ( 1.0 - U7avg ) ** 2 ) );
U8SD  = math.sqrt( ( 1.0 / 6.0 ) * ( ( 4.0 - U7avg ) ** 2 + ( 3.0 - U7avg ) ** 2 + ( 2.0 - U7avg ) ** 2 + ( 2.0 - U7avg ) ** 2 + ( 3.0 - U7avg ) ** 2 + ( 2.0 - U7avg ) ** 2 ) );
U10SD = math.sqrt( ( 1.0 / 7.0 ) * ( ( 4.0 - U7avg ) ** 2 + ( 2.0 - U7avg ) ** 2 + ( 5.0 - U7avg ) ** 2 + ( 3.0 - U7avg ) ** 2 + ( 4.0 - U7avg ) ** 2 + ( 4.0 - U7avg ) ** 2 + ( 3.0 - U7avg ) ** 2 + ( 4.0 - U7avg ) ** 2 ) );

WU2U4 = ( ( ( 3 - U2avg ) * ( 3 - U4avg ) ) + ( ( 2 - U2avg ) * ( 1 - U4avg ) ) + ( ( 1 - U2avg ) * ( 2 - U4avg ) ) + ( ( 2 - U2avg ) * ( 4 - U4avg ) ) ) / (U2SD * U4SD );
WU2U6 = ( ( ( 5 - U2avg ) * ( 2 - U6avg ) ) + ( ( 3 - U2avg ) * ( 4 - U6avg ) ) + ( ( 2 - U2avg ) * ( 4 - U6avg ) ) + ( ( 1 - U2avg ) * ( 3 - U6avg ) ) + ( ( 4 - U2avg ) * ( 4 - U6avg) ) + ( ( 3 - U2avg ) * ( 5 - U6avg ) ) + ( ( 2 - U2avg ) * ( 1 - U6avg ) ) ) / ( U2SD * U6SD );
WU2U7 = ( ( ( 2 - U2avg ) * ( 1 - U7avg ) ) + ( ( 4 - U2avg ) * ( 1 - U7avg ) ) + ( ( 2 - U2avg ) * ( 4 - U7avg ) ) + ( ( 4 - U2avg ) * ( 1 - U7avg ) ) ) / ( U2SD * U7SD );
WU2U8 = ( ( ( 5 - U2avg ) * ( 4 - U8avg ) ) + ( ( 4 - U2avg ) * ( 3 - U8avg ) ) + ( ( 2 - U2avg ) * ( 2 - U8avg ) ) + ( ( 1 - U2avg ) * ( 2 - U8avg ) ) + ( ( 2 - U2avg ) * (2 - U8avg ) ) ) / ( U2SD * U8SD );
WU2U10 = ( ( ( 5 - U2avg ) * ( 4 - U10avg ) ) + ( ( 3 - U2avg ) * (2 - U10avg ) ) + ( ( 2 - U2avg ) * ( 5 - U10avg ) ) + ( ( 4 - U2avg) * ( 3 - U10avg ) ) + ( ( 1 - U2avg ) * ( 4 - U10avg ) ) ) / ( U2SD * U10SD );

U4WR  =  ( 4 - U4avg ) * WU2U4;
U6WR  =  ( 4 - U6avg ) * WU2U6;
U7WR  =  ( 2 - U7avg ) * WU2U7;
U8WR  =  ( 3 - U8avg ) * WU2U8;
U10WR =  ( 4 - U10avg ) * WU2U10;

SumVRatingsWeigthed = U4WR + U6WR + U7WR + U8WR + U10WR;
SumWuv = WU2U4 + WU2U6 + WU2U7 + WU2U8 + WU2U10;

UU = U2avg + ( SumVRatingsWeigthed / SumWuv );
print(UU);






